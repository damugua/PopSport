package com.nexuslink;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.nexuslink.HasJoinedRooms;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HAS_JOINED_ROOMS.
*/
public class HasJoinedRoomsDao extends AbstractDao<HasJoinedRooms, Long> {

    public static final String TABLENAME = "HAS_JOINED_ROOMS";

    /**
     * Properties of entity HasJoinedRooms.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RId = new Property(1, Integer.class, "rId", false, "R_ID");
        public final static Property RoomName = new Property(2, String.class, "RoomName", false, "ROOM_NAME");
        public final static Property PersonNum = new Property(3, Integer.class, "PersonNum", false, "PERSON_NUM");
        public final static Property StartTime = new Property(4, String.class, "StartTime", false, "START_TIME");
        public final static Property Goal = new Property(5, Integer.class, "Goal", false, "GOAL");
        public final static Property Type = new Property(6, Integer.class, "Type", false, "TYPE");
    };


    public HasJoinedRoomsDao(DaoConfig config) {
        super(config);
    }
    
    public HasJoinedRoomsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HAS_JOINED_ROOMS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'R_ID' INTEGER," + // 1: rId
                "'ROOM_NAME' TEXT," + // 2: RoomName
                "'PERSON_NUM' INTEGER," + // 3: PersonNum
                "'START_TIME' TEXT," + // 4: StartTime
                "'GOAL' INTEGER," + // 5: Goal
                "'TYPE' INTEGER);"); // 6: Type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HAS_JOINED_ROOMS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HasJoinedRooms entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer rId = entity.getRId();
        if (rId != null) {
            stmt.bindLong(2, rId);
        }
 
        String RoomName = entity.getRoomName();
        if (RoomName != null) {
            stmt.bindString(3, RoomName);
        }
 
        Integer PersonNum = entity.getPersonNum();
        if (PersonNum != null) {
            stmt.bindLong(4, PersonNum);
        }
 
        String StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindString(5, StartTime);
        }
 
        Integer Goal = entity.getGoal();
        if (Goal != null) {
            stmt.bindLong(6, Goal);
        }
 
        Integer Type = entity.getType();
        if (Type != null) {
            stmt.bindLong(7, Type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HasJoinedRooms readEntity(Cursor cursor, int offset) {
        HasJoinedRooms entity = new HasJoinedRooms( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // rId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RoomName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // PersonNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // StartTime
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // Goal
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // Type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HasJoinedRooms entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRoomName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPersonNum(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setStartTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGoal(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HasJoinedRooms entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HasJoinedRooms entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
