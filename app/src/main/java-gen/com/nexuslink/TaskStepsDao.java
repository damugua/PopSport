package com.nexuslink;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.nexuslink.TaskSteps;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TASK_STEPS.
*/
public class TaskStepsDao extends AbstractDao<TaskSteps, Long> {

    public static final String TABLENAME = "TASK_STEPS";

    /**
     * Properties of entity TaskSteps.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TaskStepsName = new Property(1, String.class, "TaskStepsName", false, "TASK_STEPS_NAME");
        public final static Property TaskFlag = new Property(2, Integer.class, "taskFlag", false, "TASK_FLAG");
        public final static Property TaskNum = new Property(3, Integer.class, "taskNum", false, "TASK_NUM");
    };


    public TaskStepsDao(DaoConfig config) {
        super(config);
    }
    
    public TaskStepsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TASK_STEPS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TASK_STEPS_NAME' TEXT," + // 1: TaskStepsName
                "'TASK_FLAG' INTEGER," + // 2: taskFlag
                "'TASK_NUM' INTEGER);"); // 3: taskNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TASK_STEPS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TaskSteps entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String TaskStepsName = entity.getTaskStepsName();
        if (TaskStepsName != null) {
            stmt.bindString(2, TaskStepsName);
        }
 
        Integer taskFlag = entity.getTaskFlag();
        if (taskFlag != null) {
            stmt.bindLong(3, taskFlag);
        }
 
        Integer taskNum = entity.getTaskNum();
        if (taskNum != null) {
            stmt.bindLong(4, taskNum);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TaskSteps readEntity(Cursor cursor, int offset) {
        TaskSteps entity = new TaskSteps( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TaskStepsName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // taskFlag
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // taskNum
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TaskSteps entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskStepsName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTaskFlag(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTaskNum(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TaskSteps entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TaskSteps entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
