package com.nexuslink;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RUN.
*/
public class RunDao extends AbstractDao<Run, Long> {

    public static final String TABLENAME = "RUN";

    /**
     * Properties of entity Run.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UMileage = new Property(1, String.class, "uMileage", false, "U_MILEAGE");
        public final static Property Duration = new Property(2, String.class, "duration", false, "DURATION");
        public final static Property AverageSpeed = new Property(3, String.class, "averageSpeed", false, "AVERAGE_SPEED");
        public final static Property PathLine = new Property(4, String.class, "pathLine", false, "PATH_LINE");
        public final static Property StartPoint = new Property(5, String.class, "startPoint", false, "START_POINT");
        public final static Property EndPoint = new Property(6, String.class, "endPoint", false, "END_POINT");
        public final static Property Date = new Property(7, String.class, "date", false, "DATE");
        public final static Property Cal = new Property(8, Float.class, "cal", false, "CAL");
    };


    public RunDao(DaoConfig config) {
        super(config);
    }
    
    public RunDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RUN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'U_MILEAGE' TEXT," + // 1: uMileage
                "'DURATION' TEXT," + // 2: duration
                "'AVERAGE_SPEED' TEXT," + // 3: averageSpeed
                "'PATH_LINE' TEXT," + // 4: pathLine
                "'START_POINT' TEXT," + // 5: startPoint
                "'END_POINT' TEXT," + // 6: endPoint
                "'DATE' TEXT," + // 7: date
                "'CAL' REAL);"); // 8: cal
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RUN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Run entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uMileage = entity.getUMileage();
        if (uMileage != null) {
            stmt.bindString(2, uMileage);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(3, duration);
        }
 
        String averageSpeed = entity.getAverageSpeed();
        if (averageSpeed != null) {
            stmt.bindString(4, averageSpeed);
        }
 
        String pathLine = entity.getPathLine();
        if (pathLine != null) {
            stmt.bindString(5, pathLine);
        }
 
        String startPoint = entity.getStartPoint();
        if (startPoint != null) {
            stmt.bindString(6, startPoint);
        }
 
        String endPoint = entity.getEndPoint();
        if (endPoint != null) {
            stmt.bindString(7, endPoint);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(8, date);
        }
 
        Float cal = entity.getCal();
        if (cal != null) {
            stmt.bindDouble(9, cal);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Run readEntity(Cursor cursor, int offset) {
        Run entity = new Run( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uMileage
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // duration
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // averageSpeed
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pathLine
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // startPoint
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // endPoint
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // date
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8) // cal
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Run entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUMileage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDuration(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAverageSpeed(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPathLine(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStartPoint(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEndPoint(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCal(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Run entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Run entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
